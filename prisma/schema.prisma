generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model css {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  twVariants   Json      @default("{}")
  inlineStyles Json      @default("{}")
  custom       String[]
  boxes        Box[]
  pages        Page[]
  sections     Section[]
}

model MdBox {
  id        String    @id(map: "MdBx_pkey") @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  boxId     String
  boxType   BoxTypes  @default(MD)
  content   String
  box       Box       @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "MdBx_BxId_BT_fkey")

  @@unique([boxId, boxType], map: "MdBx_BxId_BxT_key")
}

model ImageBox {
  id        String    @id(map: "ImageBx_pkey") @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  boxId     String
  boxType   BoxTypes  @default(IMAGE)
  src       String
  altText   String?
  width     Int?
  height    Int?
  box       Box       @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "ImhBx_BxId_BT_fkey")

  @@unique([boxId, boxType], map: "ImgBx_BxId_BxT_key")
}

model IframeBox {
  id        String         @id(map: "IframeBx_pkey") @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
  boxId     String
  boxType   BoxTypes       @default(IFRAME)
  type      IframeBoxTypes
  src       String
  title     String?
  box       Box            @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "IframeBx_BxId_BT_fkey")

  @@unique([boxId, boxType], map: "IframeBx_BxId_BxT_key")
}

model QuoteBox {
  id        String    @id(map: "QuoteBx_pkey") @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  boxId     String
  boxType   BoxTypes  @default(QUOTE)
  cite      String
  content   String
  box       Box       @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "QuoteBx_BxId_BT_fkey")

  @@unique([boxId, boxType], map: "QuoteBx_BxId_BxT_key")
}

model HeaderBox {
  id          String         @id(map: "HeaderBx_pkey") @default(cuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime?      @updatedAt
  title       String
  description String?
  hType       HeaderBoxHType @default(DYNAMIC)
  boxId       String
  boxType     BoxTypes       @default(HEADER)
  box         Box            @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "HeaderBx_BxId_BT_fkey")

  @@unique([boxId, boxType], map: "HeaderBx_BxId_BxT_key")
}

model Tabs {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  boxId        String
  boxType      BoxTypes    @default(TABS_HOLDER)
  boxesToTabss BoxToTabs[]
  box          Box         @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "TabsBx_BxId_BT_fkey")

  @@unique([boxId, boxType], map: "Tabs_BxId_BxT_key")
}

model BoxToTabs {
  id        String    @unique(map: "BTTs_id_key") @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  title     String
  order     Int       @default(autoincrement())
  boxId     String
  tabsId    String
  box       Box       @relation(fields: [boxId], references: [id], onDelete: Cascade, map: "BTCB_BxId_fkey")
  tabsBox   Tabs      @relation(fields: [tabsId], references: [id], onDelete: Cascade, map: "BTCB_tabsId_fkey")

  @@id([tabsId, boxId], map: "BTTs_pkey")
  @@index([boxId], map: "BTTs_BxId_idx")
  @@index([order], map: "BTTs_order_idx")
  @@index([tabsId], map: "BTTs_tabsBxId_idx")
}

model Slider {
  id                String            @id(map: "SliderBx_pkey") @default(cuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?         @updatedAt
  boxId             String
  boxType           BoxTypes          @default(SLIDER)
  slidesPerViewType SlidesPerViewType @default(DEFAULT)
  boxesToSliders    BoxToSlider[]
  box               Box               @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "SliderBx_BxId_BT_fkey")

  @@unique([boxId, boxType], map: "SliderBx_BxId_BxT_key")
}

model BoxToSlider {
  id        String    @unique(map: "BTS_id_key") @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  title     String?
  order     Int       @default(autoincrement())
  boxId     String
  sliderId  String
  box       Box       @relation(fields: [boxId], references: [id], onDelete: Cascade, map: "BTSB_BxId_fkey")
  slider    Slider    @relation(fields: [sliderId], references: [id], onDelete: Cascade, map: "BTSB_sliderBxId_fkey")

  @@id([sliderId, boxId], map: "BTS_pkey")
  @@index([boxId], map: "BTS_BxId_idx")
  @@index([order], map: "BTS_order_idx")
  @@index([sliderId], map: "BTS_sliderBxId_idx")
}

model Grid {
  id           String      @id(map: "GridBx_pkey") @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  boxId        String
  boxType      BoxTypes    @default(GRID)
  boxesToGrids BoxToGrid[]
  box          Box         @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "GridBx_BxId_BT_fkey")

  @@unique([boxId, boxType], map: "GridBx_BxId_BxT_key")
}

model BoxToGrid {
  id        String    @unique(map: "BTG_id_key") @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  order     Int       @default(autoincrement())
  boxId     String
  gridId    String
  box       Box       @relation(fields: [boxId], references: [id], onDelete: Cascade, map: "BTGB_BxId_fkey")
  grid      Grid      @relation(fields: [gridId], references: [id], onDelete: Cascade, map: "BTGB_gridBxId_fkey")

  @@id([gridId, boxId], map: "BTG_pkey")
  @@index([boxId], map: "BTG_BxId_idx")
  @@index([gridId], map: "BTG_gridBxId_idx")
  @@index([order], map: "BTG_order_idx")
}

model Box {
  id             String        @unique @default(cuid())
  type           BoxTypes
  createdAt      DateTime      @default(now())
  order          Int           @default(autoincrement())
  cssId          String
  sectionId      String?
  css            css           @relation(fields: [cssId], references: [id])
  section        Section?      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  boxesToGrids   BoxToGrid[]
  boxesToSliders BoxToSlider[]
  boxesToTabss   BoxToTabs[]
  grid           Grid?
  headerBox      HeaderBox?
  iframeBox      IframeBox?
  imageBox       ImageBox?
  mdBox          MdBox?
  quoteBox       QuoteBox?
  slider         Slider?
  tabs           Tabs?

  @@id([id, type])
  @@index([order])
  @@index([cssId])
  @@index([sectionId])
}

model Section {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  order     Int      @default(autoincrement())
  pageId    String
  cssId     String
  body      Box[]
  css       css      @relation(fields: [cssId], references: [id])
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([order])
  @@index([pageId])
  @@index([cssId])
}

model Category {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  name      String    @unique
  counter   Int       @default(0)
  pages     Page[]
}

model Image {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  src       String    @unique
  altText   String?
  width     Int?
  height    Int?
  pages     Page[]
}

model Page {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  cssId        String
  slug         String?
  categoryName String
  imageId      String?
  category     Category  @relation(fields: [categoryName], references: [name])
  css          css       @relation(fields: [cssId], references: [id])
  image        Image?    @relation(fields: [imageId], references: [id])
  sections     Section[]

  @@unique([categoryName, slug])
  @@index([cssId])
}

enum HeaderBoxHType {
  DYNAMIC
  H1
  H2
  H3
  H4
  H5
  H6
}

enum IframeBoxTypes {
  YOUTUBE
  INSTAGRAM
  SOUND_CLOUD
}

enum SlidesPerViewType {
  DEFAULT
  ONE_SLIDE
  LARGE_SLIDES
}

enum BoxTypes {
  MD
  IMAGE
  IFRAME
  QUOTE
  HEADER
  TABS_HOLDER
  GRID
  SLIDER
}
