generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model css {
  id            String    @id
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  twVariants    Json      @default("{}")
  inlineStyles  Json      @default("{}")
  customClasses String[]  @default([])
  bxes          Bx[]
  pgs           Pg[]
  sects         Sect[]
}

model MdBx {
  id        String    @id(map: "MdBx_PK")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  bxId      String
  bxType    BxTypes   @default(MD)
  content   String    @db.Text
  bx        Bx        @relation(fields: [bxId, bxType], references: [id, type], onDelete: Cascade, map: "MdBx_BxId_BT_FK")

  @@unique([bxId, bxType], map: "MdBx_BxId_BxT_K")
}

model ImgBx {
  id        String    @id(map: "ImgBx_PK")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  bxId      String
  bxType    BxTypes   @default(IMAGE)
  src       String
  altText   String?
  width     Int?
  height    Int?
  bx        Bx        @relation(fields: [bxId, bxType], references: [id, type], onDelete: Cascade, map: "ImhBx_BxId_BT_FK")

  @@unique([bxId, bxType], map: "ImgBx_BxId_BxT_K")
}

model IframeBx {
  id        String        @id(map: "IframeBx_PK")
  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt
  bxId      String
  bxType    BxTypes       @default(IFRAME)
  type      IframeBxTypes
  src       String
  title     String?
  bx        Bx            @relation(fields: [bxId, bxType], references: [id, type], onDelete: Cascade, map: "IframeBx_BxId_BT_FK")

  @@unique([bxId, bxType], map: "IframeBx_BxId_BxT_K")
}

model QuoteBx {
  id        String    @id(map: "QuoteBx_PK")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  bxId      String
  bxType    BxTypes   @default(QUOTE)
  cite      String
  content   String    @db.Text
  bx        Bx        @relation(fields: [bxId, bxType], references: [id, type], onDelete: Cascade, map: "QuoteBx_BxId_BT_FK")

  @@unique([bxId, bxType], map: "QuoteBx_BxId_BxT_K")
}

model HeaderBx {
  id          String        @id(map: "HeaderBx_PK")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  title       String
  description String?
  hType       HeaderBxHType @default(DYNAMIC)
  bxId        String
  bxType      BxTypes       @default(HEADER)
  bx          Bx            @relation(fields: [bxId, bxType], references: [id, type], onDelete: Cascade, map: "HeaderBx_BxId_BT_FK")

  @@unique([bxId, bxType], map: "HeaderBx_BxId_BxT_K")
}

model Tabs {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  bxId      String
  bxType    BxTypes   @default(TABS_HOLDER)
  tabsBxs   TabsBx[]
  bx        Bx        @relation(fields: [bxId, bxType], references: [id, type], onDelete: Cascade, map: "TabsBx_BxId_BT_FK")

  @@unique([bxId, bxType], map: "Tabs_BxId_BxT_K")
}

model TabsBx {
  id        String    @unique(map: "BTTs_id_K")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  title     String
  order     Int       @default(autoincrement())
  bxId      String
  tabsId    String
  bx        Bx        @relation(fields: [bxId], references: [id], onDelete: Cascade, map: "BTCB_BxId_FK")
  tabsBx    Tabs      @relation(fields: [tabsId], references: [id], onDelete: Cascade, map: "BTCB_tabsId_FK")

  @@id([tabsId, bxId], map: "BTTs_PK")
  @@index([bxId], map: "BTTs_BxId_idx")
  @@index([order], map: "BTTs_order_idx")
  @@index([tabsId], map: "BTTs_tabsBxId_idx")
}

model Slider {
  id                String            @id(map: "SlideBx_PK")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?         @updatedAt
  bxId              String
  bxType            BxTypes           @default(SLIDER)
  slidesPerViewType SlidesPerViewType @default(DEFAULT)
  slidesBxs         SlideBx[]
  bx                Bx                @relation(fields: [bxId, bxType], references: [id, type], onDelete: Cascade, map: "SlideBx_BxId_BT_FK")

  @@unique([bxId, bxType], map: "SlideBx_BxId_BxT_K")
}

model SlideBx {
  id        String    @unique(map: "BTS_id_K")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  title     String?
  order     Int       @default(autoincrement())
  bxId      String
  sliderId  String
  bx        Bx        @relation(fields: [bxId], references: [id], onDelete: Cascade, map: "BTSB_BxId_FK")
  slider    Slider    @relation(fields: [sliderId], references: [id], onDelete: Cascade, map: "BTSB_slideBxId_FK")

  @@id([sliderId, bxId], map: "BTS_PK")
  @@index([bxId], map: "BTS_BxId_idx")
  @@index([order], map: "BTS_order_idx")
  @@index([sliderId], map: "BTS_slideBxId_idx")
}

model Grid {
  id        String    @id(map: "GridBx_PK")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  bxId      String
  bxType    BxTypes   @default(GRID)
  gridsBxs  GridBx[]
  bx        Bx        @relation(fields: [bxId, bxType], references: [id, type], onDelete: Cascade, map: "GridBx_BxId_BT_FK")

  @@unique([bxId, bxType], map: "GridBx_BxId_BxT_K")
}

model GridBx {
  id        String    @unique(map: "BTG_id_K")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  order     Int       @default(autoincrement())
  bxId      String
  gridId    String
  bx        Bx        @relation(fields: [bxId], references: [id], onDelete: Cascade, map: "BTGB_BxId_FK")
  grid      Grid      @relation(fields: [gridId], references: [id], onDelete: Cascade, map: "BTGB_gridBxId_FK")

  @@id([gridId, bxId], map: "BTG_PK")
  @@index([bxId], map: "BTG_BxId_idx")
  @@index([gridId], map: "BTG_gridBxId_idx")
  @@index([order], map: "BTG_order_idx")
}

model Bx {
  id        String    @unique
  type      BxTypes
  createdAt DateTime  @default(now())
  order     Int       @default(autoincrement())
  cssId     String
  sectId    String?
  css       css       @relation(fields: [cssId], references: [id])
  sect      Sect?     @relation(fields: [sectId], references: [id], onDelete: Cascade)
  gridsBxs  GridBx[]
  slidesBxs SlideBx[]
  tabsBxs   TabsBx[]
  grid      Grid?
  headerBx  HeaderBx?
  iframeBx  IframeBx?
  imgBx     ImgBx?
  mdBx      MdBx?
  quoteBx   QuoteBx?
  slider    Slider?
  tabs      Tabs?

  @@id([id, type])
  @@index([order])
  @@index([cssId])
  @@index([sectId])
}

model Sect {
  id        String   @id
  createdAt DateTime @default(now())
  order     Int      @default(autoincrement())
  pgId      String
  cssId     String
  body      Bx[]
  css       css      @relation(fields: [cssId], references: [id])
  pg        Pg       @relation(fields: [pgId], references: [id], onDelete: Cascade)

  @@index([order])
  @@index([pgId])
  @@index([cssId])
}

model PgCategory {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  name      String    @unique
  counter   Int       @default(0)
  pgs       Pg[]
  hasSubPgs Boolean   @default(false)
  isPg      Boolean   @default(false)
}

model Img {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  src       String    @unique
  altText   String?
  width     Int?
  height    Int?
  pgs       Pg[]
}

model seo {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  title       String
  description String? @db.Text

  // pgId String?
  // pg   Pg?   @relation(fields: [pgId], references: [id])
  pg Pg?
}

model Pg {
  id             String     @id
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?  @updatedAt
  cssId          String
  slug           String?
  pgCategoryName String
  imgId          String?
  pgCategory     PgCategory @relation(fields: [pgCategoryName], references: [name])
  css            css        @relation(fields: [cssId], references: [id])
  img            Img?       @relation(fields: [imgId], references: [id])
  sects          Sect[]

  isActive Boolean @default(false)

  seoId String? @unique
  seo   seo?    @relation(fields: [seoId], references: [id])

  @@unique([pgCategoryName, slug])
  @@index([cssId])
}

enum HeaderBxHType {
  DYNAMIC
  H1
  H2
  H3
  H4
  H5
  H6
}

enum IframeBxTypes {
  YOUTUBE
  INSTAGRAM
  SOUND_CLOUD
}

enum SlidesPerViewType {
  DEFAULT
  ONE_SLIDE
  LARGE_SLIDES
}

enum BxTypes {
  MD
  IMAGE
  IFRAME
  QUOTE
  HEADER
  TABS_HOLDER
  GRID
  SLIDER
}
