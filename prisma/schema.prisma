generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model css {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  twVariants   Json     @default("{}")
  inlineStyles Json     @default("{}")
  custom       String[]

  boxes    Box[]
  pages    Page[]
  sections Section[]
}

model MDBox {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  boxId     String
  boxType   BoxTypes  @default(MD)
  content   String
  box       Box       @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade)

  @@unique([boxId, boxType])
}

model ImageBox {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  boxId     String
  boxType   BoxTypes  @default(IMAGE)
  src       String
  altText   String?
  width     Int?
  height    Int?
  box       Box       @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade)

  @@unique([boxId, boxType])
}

model IframeBox {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
  boxId     String
  boxType   BoxTypes       @default(IFRAME)
  type      IframeBoxTypes
  src       String
  title     String?
  box       Box            @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade)

  @@unique([boxId, boxType])
}

model QuoteBox {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  boxId     String
  boxType   BoxTypes  @default(QUOTE)
  cite      String
  content   String
  box       Box       @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade)

  @@unique([boxId, boxType])
}

model HeaderBox {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  title           String
  description     String?
  isMainPageTitle Boolean @default(false)

  box     Box      @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade)
  boxId   String
  boxType BoxTypes @default(HEADER)

  @@unique([boxId, boxType])
}

model TabsHolder {
  id                 String            @id @default(cuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime?         @updatedAt
  boxId              String
  boxType            BoxTypes          @default(TABS_HOLDER)
  boxesToTabsHolders BoxToTabsHolder[]
  box                Box               @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade)

  @@unique([boxId, boxType])
}

model BoxToTabsHolder {
  id        String    @unique @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  title String

  order Int @default(autoincrement())

  box   Box    @relation(fields: [boxId], references: [id], onDelete: Cascade, map: "_BTCB_boxId_fkey")
  boxId String

  tabsHolder   TabsHolder @relation(fields: [tabsHolderId], references: [id], onDelete: Cascade, map: "_BTCB_tabsHolderId_fkey")
  tabsHolderId String

  @@id([tabsHolderId, boxId], map: "_BTCB_pkey")
  @@index([order])
  @@index([tabsHolderId])
  @@index([boxId])
}

model SliderBox {
  id                String                        @id @default(cuid())
  createdAt         DateTime                      @default(now())
  updatedAt         DateTime?                     @updatedAt
  boxId             String
  boxType           BoxTypes                      @default(SLIDER)
  slidesPerViewType SlidersHolderSlidePerViewType @default(DEFAULT)
  boxesToSliders    BoxToSlider[]
  box               Box                           @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade)

  @@unique([boxId, boxType])
}

model BoxToSlider {
  id        String    @unique @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  title String?

  order Int @default(autoincrement())

  box   Box    @relation(fields: [boxId], references: [id], onDelete: Cascade, map: "_BTSB_boxId_fkey")
  boxId String

  sliderBox   SliderBox @relation(fields: [sliderBoxId], references: [id], onDelete: Cascade, map: "_BTSB_sliderBoxId_fkey")
  sliderBoxId String

  @@id([sliderBoxId, boxId], map: "_BTSB_pkey")
  @@index([order])
  @@index([sliderBoxId])
  @@index([boxId])
}

model GridBox {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  boxId        String
  boxType      BoxTypes    @default(GRID)
  boxesToGrids BoxToGrid[]
  box          Box         @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade)

  @@unique([boxId, boxType])
}

model BoxToGrid {
  id        String    @unique @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  order Int @default(autoincrement())

  box   Box    @relation(fields: [boxId], references: [id], onDelete: Cascade, map: "_BTGB_boxId_fkey")
  boxId String

  gridBox   GridBox @relation(fields: [gridBoxId], references: [id], onDelete: Cascade, map: "_BTGB_gridBoxId_fkey")
  gridBoxId String

  @@id([gridBoxId, boxId], map: "_BTGB_pkey")
  @@index([order])
  @@index([boxId])
  @@index([gridBoxId])
}

model Box {
  id        String   @unique @default(cuid())
  type      BoxTypes
  createdAt DateTime @default(now())

  order Int @default(autoincrement())

  css   css    @relation(fields: [cssId], references: [id], onDelete: Cascade)
  cssId String

  section   Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId String?

  boxesToGrids       BoxToGrid[]
  boxesToSliders     BoxToSlider[]
  boxesToTabsHolders BoxToTabsHolder[]
  gridBox            GridBox?
  headerBox          HeaderBox?
  iframeBox          IframeBox?
  imageBox           ImageBox?
  mdBox              MDBox?
  quoteBox           QuoteBox?
  sliderBox          SliderBox?
  tabsHolder         TabsHolder?

  @@id([id, type])
  @@index([order])
  @@index([cssId])
  @@index([sectionId])
}

model Section {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  order Int @default(autoincrement())

  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId String

  css   css    @relation(fields: [cssId], references: [id], onDelete: Cascade)
  cssId String

  body Box[]

  @@index([order])
  @@index([pageId])
  @@index([cssId])
}

model Page {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  cssId     String
  slug      String
  category  String?
  css       css       @relation(fields: [cssId], references: [id], onDelete: Cascade)
  sections  Section[]

  @@index([cssId])
}

enum IframeBoxTypes {
  YOUTUBE
  INSTAGRAM
  SOUND_CLOUD
}

enum SlidersHolderSlidePerViewType {
  DEFAULT
  ONE_SLIDE
  LARGE_SLIDES
}

enum BoxTypes {
  MD
  IMAGE
  IFRAME
  QUOTE
  HEADER
  TABS_HOLDER
  GRID
  SLIDER
}

// DROP TABLE "Page" Cascade;
// DROP TABLE "Section" Cascade;
// DROP TABLE "Box" Cascade;
// DROP TABLE "css" Cascade;
// DROP TABLE "TabsHolder" Cascade;
// DROP TABLE "SliderBox" Cascade;
// DROP TABLE "GridBox" Cascade;
// DROP TABLE "MDBox" Cascade;
// DROP TABLE "ImageBox" Cascade;
// DROP TABLE "IframeBox" Cascade;
// DROP TABLE "QuoteBox" Cascade;
// DROP TABLE "HeaderBox" Cascade;
// DROP TABLE "BoxToTabsHolder" Cascade;
// DROP TABLE "BoxToSlider" Cascade;
// DROP TABLE "BoxToGrid" Cascade;
