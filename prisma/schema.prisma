generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model css {
  id            String    @id
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  twVariants    Json      @default("{}")
  inlineStyles  Json      @default("{}")
  customClasses String[]  @default([])
  boxes         Box[]
  pages         Page[]
  sections      Section[]
}

model MdBox {
  id        String    @id(map: "MdBx_PK")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  boxId     String
  boxType   BoxTypes  @default(MD)
  content   String    @db.Text
  box       Box       @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "MdBx_BxId_BT_FK")

  @@unique([boxId, boxType], map: "MdBx_BxId_BxT_K")
}

model ImageBox {
  id        String    @id(map: "ImageBx_PK")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  boxId     String
  boxType   BoxTypes  @default(IMAGE)
  src       String
  altText   String?
  width     Int?
  height    Int?
  box       Box       @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "ImhBx_BxId_BT_FK")

  @@unique([boxId, boxType], map: "ImgBx_BxId_BxT_K")
}

model IframeBox {
  id        String         @id(map: "IframeBx_PK")
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
  boxId     String
  boxType   BoxTypes       @default(IFRAME)
  type      IframeBoxTypes
  src       String
  title     String?
  box       Box            @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "IframeBx_BxId_BT_FK")

  @@unique([boxId, boxType], map: "IframeBx_BxId_BxT_K")
}

model QuoteBox {
  id        String    @id(map: "QuoteBx_PK")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  boxId     String
  boxType   BoxTypes  @default(QUOTE)
  cite      String
  content   String    @db.Text
  box       Box       @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "QuoteBx_BxId_BT_FK")

  @@unique([boxId, boxType], map: "QuoteBx_BxId_BxT_K")
}

model HeaderBox {
  id          String         @id(map: "HeaderBx_PK")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime?      @updatedAt
  title       String
  description String?
  hType       HeaderBoxHType @default(DYNAMIC)
  boxId       String
  boxType     BoxTypes       @default(HEADER)
  box         Box            @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "HeaderBx_BxId_BT_FK")

  @@unique([boxId, boxType], map: "HeaderBx_BxId_BxT_K")
}

model Tabs {
  id          String      @id
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  boxId       String
  boxType     BoxTypes    @default(TABS_HOLDER)
  boxesToTabs BoxToTabs[]
  box         Box         @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "TabsBx_BxId_BT_FK")

  @@unique([boxId, boxType], map: "Tabs_BxId_BxT_K")
}

model BoxToTabs {
  id        String    @unique(map: "BTTs_id_K")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  title     String
  order     Int       @default(autoincrement())
  boxId     String
  tabsId    String
  box       Box       @relation(fields: [boxId], references: [id], onDelete: Cascade, map: "BTCB_BxId_FK")
  tabsBox   Tabs      @relation(fields: [tabsId], references: [id], onDelete: Cascade, map: "BTCB_tabsId_FK")

  @@id([tabsId, boxId], map: "BTTs_PK")
  @@index([boxId], map: "BTTs_BxId_idx")
  @@index([order], map: "BTTs_order_idx")
  @@index([tabsId], map: "BTTs_tabsBxId_idx")
}

model Slider {
  id                String            @id(map: "SliderBx_PK")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?         @updatedAt
  boxId             String
  boxType           BoxTypes          @default(SLIDER)
  slidesPerViewType SlidesPerViewType @default(DEFAULT)
  boxesToSliders    BoxToSlider[]
  box               Box               @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "SliderBx_BxId_BT_FK")

  @@unique([boxId, boxType], map: "SliderBx_BxId_BxT_K")
}

model BoxToSlider {
  id        String    @unique(map: "BTS_id_K")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  title     String?
  order     Int       @default(autoincrement())
  boxId     String
  sliderId  String
  box       Box       @relation(fields: [boxId], references: [id], onDelete: Cascade, map: "BTSB_BxId_FK")
  slider    Slider    @relation(fields: [sliderId], references: [id], onDelete: Cascade, map: "BTSB_sliderBxId_FK")

  @@id([sliderId, boxId], map: "BTS_PK")
  @@index([boxId], map: "BTS_BxId_idx")
  @@index([order], map: "BTS_order_idx")
  @@index([sliderId], map: "BTS_sliderBxId_idx")
}

model Grid {
  id           String      @id(map: "GridBx_PK")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  boxId        String
  boxType      BoxTypes    @default(GRID)
  boxesToGrids BoxToGrid[]
  box          Box         @relation(fields: [boxId, boxType], references: [id, type], onDelete: Cascade, map: "GridBx_BxId_BT_FK")

  @@unique([boxId, boxType], map: "GridBx_BxId_BxT_K")
}

model BoxToGrid {
  id        String    @unique(map: "BTG_id_K")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  order     Int       @default(autoincrement())
  boxId     String
  gridId    String
  box       Box       @relation(fields: [boxId], references: [id], onDelete: Cascade, map: "BTGB_BxId_FK")
  grid      Grid      @relation(fields: [gridId], references: [id], onDelete: Cascade, map: "BTGB_gridBxId_FK")

  @@id([gridId, boxId], map: "BTG_PK")
  @@index([boxId], map: "BTG_BxId_idx")
  @@index([gridId], map: "BTG_gridBxId_idx")
  @@index([order], map: "BTG_order_idx")
}

model Box {
  id             String        @unique
  type           BoxTypes
  createdAt      DateTime      @default(now())
  order          Int           @default(autoincrement())
  cssId          String
  sectionId      String?
  css            css           @relation(fields: [cssId], references: [id])
  section        Section?      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  boxesToGrids   BoxToGrid[]
  boxesToSliders BoxToSlider[]
  boxesToTabs    BoxToTabs[]
  grid           Grid?
  headerBox      HeaderBox?
  iframeBox      IframeBox?
  imageBox       ImageBox?
  mdBox          MdBox?
  quoteBox       QuoteBox?
  slider         Slider?
  tabs           Tabs?

  @@id([id, type])
  @@index([order])
  @@index([cssId])
  @@index([sectionId])
}

model Section {
  id        String   @id
  createdAt DateTime @default(now())
  order     Int      @default(autoincrement())
  pageId    String
  cssId     String
  body      Box[]
  css       css      @relation(fields: [cssId], references: [id])
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([order])
  @@index([pageId])
  @@index([cssId])
}

model PageCategory {
  id          String    @id
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  name        String    @unique
  counter     Int       @default(0)
  pages       Page[]
  hasSubPages Boolean   @default(false)
  isPage      Boolean   @default(false)
}

model Image {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  src       String    @unique
  altText   String?
  width     Int?
  height    Int?
  pages     Page[]
}

model seo {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  title       String
  description String? @db.Text

  // pageId String?
  // page   Page?   @relation(fields: [pageId], references: [id])
  page Page?
}

model Page {
  id               String       @id
  createdAt        DateTime     @default(now())
  updatedAt        DateTime?    @updatedAt
  cssId            String
  slug             String?
  pageCategoryName String
  imageId          String?
  pageCategory     PageCategory @relation(fields: [pageCategoryName], references: [name])
  css              css          @relation(fields: [cssId], references: [id])
  image            Image?       @relation(fields: [imageId], references: [id])
  sections         Section[]

  isActive Boolean @default(false)

  seoId String? @unique
  seo   seo?    @relation(fields: [seoId], references: [id])

  @@unique([pageCategoryName, slug])
  @@index([cssId])
}

enum HeaderBoxHType {
  DYNAMIC
  H1
  H2
  H3
  H4
  H5
  H6
}

enum IframeBoxTypes {
  YOUTUBE
  INSTAGRAM
  SOUND_CLOUD
}

enum SlidesPerViewType {
  DEFAULT
  ONE_SLIDE
  LARGE_SLIDES
}

enum BoxTypes {
  MD
  IMAGE
  IFRAME
  QUOTE
  HEADER
  TABS_HOLDER
  GRID
  SLIDER
}
